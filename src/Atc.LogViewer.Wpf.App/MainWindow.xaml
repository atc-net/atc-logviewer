<atc:NiceWindow
    x:Class="Atc.LogViewer.Wpf.App.MainWindow"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:app="clr-namespace:Atc.LogViewer.Wpf.App"
    xmlns:atc="https://github.com/atc-net/atc-wpf/tree/main/schemas"
    xmlns:atcValueConverters="https://github.com/atc-net/atc-wpf/tree/main/schemas/value-converters"
    xmlns:b="http://schemas.microsoft.com/xaml/behaviors"
    xmlns:behaviors="clr-namespace:Atc.Wpf.Controls.Behaviors;assembly=Atc.Wpf.Controls"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:fluent="urn:fluent-ribbon"
    xmlns:fontIcons="clr-namespace:Atc.Wpf.FontIcons;assembly=Atc.Wpf.FontIcons"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:models="clr-namespace:Atc.LogViewer.Wpf.App.Models"
    xmlns:userControls="clr-namespace:Atc.LogViewer.Wpf.App.UserControls"
    xmlns:valueConverters="clr-namespace:Atc.LogViewer.Wpf.App.ValueConverters"
    xmlns:wpf="clr-namespace:LiveChartsCore.SkiaSharpView.WPF;assembly=LiveChartsCore.SkiaSharpView.WPF"
    Title="..:: ATC Log.Viewer ::.."
    Width="1500"
    Height="1000"
    MinWidth="700"
    MinHeight="400"
    d:DataContext="{d:DesignInstance Type=app:MainWindowViewModel}"
    WindowState="{Binding Path=WindowState}"
    mc:Ignorable="d">

    <atc:NiceWindow.Resources>
        <ResourceDictionary>
            <atcValueConverters:FontIconImageSourceValueConverter x:Key="FontIconImageConverter" />
            <atcValueConverters:LogLevelToBrushValueConverter x:Key="LogLevelToBrushConverter" />
            <valueConverters:JsonFormatVisibilityVisibleValueConverter x:Key="JsonFormatVisibilityConverter" />
            <valueConverters:ViewModeVisibilityValueConverter x:Key="ViewModeVisibilityConverter" />

            <Style
                x:Key="{x:Type fluent:BackstageTabControl}"
                BasedOn="{StaticResource {x:Type fluent:BackstageTabControl}}"
                TargetType="{x:Type fluent:BackstageTabControl}">
                <Setter Property="SelectedContentMargin" Value="0" />
            </Style>

            <Style x:Key="ButtonStyle" TargetType="{x:Type fluent:Button}">
                <Setter Property="Margin" Value="2,0" />
                <Setter Property="MinWidth" Value="60" />
            </Style>

            <Style x:Key="ToggleButtonStyle" TargetType="{x:Type fluent:ToggleButton}">
                <Setter Property="Margin" Value="2,0" />
                <Setter Property="MinWidth" Value="60" />
            </Style>
        </ResourceDictionary>
    </atc:NiceWindow.Resources>

    <atc:BusyOverlay IsBusy="{Binding Path=IsBusy}">
        <atc:GridEx Rows="Auto,*,Auto">
            <!--  ::::::::::::::::::::::::::::::::::::::::::::::  -->
            <fluent:Ribbon
                Grid.Row="0"
                AutomaticStateManagement="True"
                CanCustomizeQuickAccessToolBar="False"
                IsQuickAccessToolBarMenuDropDownVisible="False"
                IsQuickAccessToolBarVisible="False">

                <!--  Backstage  -->
                <fluent:Ribbon.Menu>
                    <fluent:Backstage Header="Application" KeyTip="A">
                        <fluent:BackstageTabControl>
                            <fluent:Button
                                Command="{Binding Path=NewProfileCommand}"
                                Header="New profile"
                                Icon="{Binding Source={x:Static fontIcons:IcoFontType.ContactAdd}, Converter={StaticResource FontIconImageConverter}, ConverterParameter={StaticResource AtcApps.Brushes.ThemeForeground}}"
                                KeyTip="N" />
                            <fluent:Button
                                Command="{Binding Path=OpenProfileCommand}"
                                Header="Open profile"
                                Icon="{Binding Source={x:Static fontIcons:IcoFontType.EnvelopeOpen}, Converter={StaticResource FontIconImageConverter}, ConverterParameter={StaticResource AtcApps.Brushes.ThemeForeground}}"
                                KeyTip="P" />
                            <fluent:Button
                                Command="{Binding Path=OpenLastUsedProfileCommand}"
                                Header="Open last used profile"
                                Icon="{Binding Source={x:Static fontIcons:IcoFontType.EnvelopeOpen}, Converter={StaticResource FontIconImageConverter}, ConverterParameter={StaticResource AtcApps.Brushes.ThemeForeground}}"
                                KeyTip="R" />
                            <fluent:Button
                                Command="{Binding Path=SaveProfileCommand}"
                                Header="Save profile"
                                Icon="{Binding Source={x:Static fontIcons:IcoFontType.Save}, Converter={StaticResource FontIconImageConverter}, ConverterParameter={StaticResource AtcApps.Brushes.ThemeForeground}}"
                                KeyTip="S" />
                            <fluent:Button
                                Command="{Binding Path=OpenLogFolderCommand}"
                                Header="Open log folder"
                                Icon="{Binding Source={x:Static fontIcons:FontAwesomeRegularType.FolderOpen}, Converter={StaticResource FontIconImageConverter}, ConverterParameter={StaticResource AtcApps.Brushes.ThemeForeground}}"
                                KeyTip="O" />
                            <Separator />
                            <fluent:Button
                                Command="{Binding Path=OpenApplicationSettingsCommand}"
                                Header="Application settings"
                                Icon="{Binding Source={x:Static fontIcons:IcoFontType.UiSettings}, Converter={StaticResource FontIconImageConverter}, ConverterParameter={StaticResource AtcApps.Brushes.ThemeForeground}}" />
                            <fluent:Button
                                Command="{Binding Path=OpenApplicationCheckForUpdatesCommand}"
                                Header="Check for updates"
                                Icon="{Binding Source={x:Static fontIcons:FontBootstrapType.Download}, Converter={StaticResource FontIconImageConverter}, ConverterParameter={StaticResource AtcApps.Brushes.ThemeForeground}}" />
                            <fluent:Button
                                Command="{Binding Path=OpenApplicationAboutCommand}"
                                Header="About"
                                Icon="{Binding Source={x:Static fontIcons:FontAwesomeSolidType.InfoCircle}, Converter={StaticResource FontIconImageConverter}, ConverterParameter={StaticResource AtcApps.Brushes.ThemeForeground}}" />
                            <Separator />
                            <fluent:Button
                                Command="{Binding Path=ApplicationExitCommand}"
                                Header="Exit"
                                Icon="{Binding Source={x:Static fontIcons:FontAwesomeRegularType.TimesCircle}, Converter={StaticResource FontIconImageConverter}, ConverterParameter={StaticResource AtcApps.Brushes.ThemeForeground}}"
                                KeyTip="X" />
                        </fluent:BackstageTabControl>
                    </fluent:Backstage>
                </fluent:Ribbon.Menu>

                <!--  Tabs  -->
                <fluent:RibbonTabItem Header="Home" KeyTip="H">
                    <fluent:RibbonGroupBox Header="Filter">
                        <StackPanel Orientation="Horizontal">
                            <fluent:ToggleButton
                                Header="Trace"
                                IsChecked="{Binding Path=IsTraceEnabled}"
                                LargeIcon="{Binding Source={x:Static fontIcons:IcoFontType.BearTracks}, Converter={StaticResource FontIconImageConverter}, ConverterParameter={StaticResource TraceBrush}}"
                                Style="{StaticResource ToggleButtonStyle}" />
                            <fluent:ToggleButton
                                Header="Debug"
                                IsChecked="{Binding Path=IsDebugEnabled}"
                                LargeIcon="{Binding Source={x:Static fontIcons:IcoFontType.FrogTracks}, Converter={StaticResource FontIconImageConverter}, ConverterParameter={StaticResource DebugBrush}}"
                                Style="{StaticResource ToggleButtonStyle}" />
                            <fluent:ToggleButton
                                Header="Info"
                                IsChecked="{Binding Path=IsInfoEnabled}"
                                LargeIcon="{Binding Source={x:Static fontIcons:IcoFontType.InfoCircle}, Converter={StaticResource FontIconImageConverter}, ConverterParameter={StaticResource InformationBrush}}"
                                Style="{StaticResource ToggleButtonStyle}" />
                            <fluent:ToggleButton
                                Header="Warning"
                                IsChecked="{Binding Path=IsWarningEnabled}"
                                LargeIcon="{Binding Source={x:Static fontIcons:IcoFontType.Warning}, Converter={StaticResource FontIconImageConverter}, ConverterParameter={StaticResource WarningBrush}}"
                                Style="{StaticResource ToggleButtonStyle}" />
                            <fluent:ToggleButton
                                Header="Error"
                                IsChecked="{Binding Path=IsErrorEnabled}"
                                LargeIcon="{Binding Source={x:Static fontIcons:IcoFontType.Bug}, Converter={StaticResource FontIconImageConverter}, ConverterParameter={StaticResource ErrorBrush}}"
                                Style="{StaticResource ToggleButtonStyle}" />
                            <fluent:ToggleButton
                                Header="Critical"
                                IsChecked="{Binding Path=IsCriticalEnabled}"
                                LargeIcon="{Binding Source={x:Static fontIcons:IcoFontType.AngryMonster}, Converter={StaticResource FontIconImageConverter}, ConverterParameter={StaticResource CriticalBrush}}"
                                Style="{StaticResource ToggleButtonStyle}" />
                            <StackPanel Orientation="Horizontal">
                                <StackPanel Margin="10" Orientation="Horizontal">
                                    <TextBox
                                        Width="400"
                                        Height="40"
                                        VerticalContentAlignment="Center"
                                        Background="{DynamicResource AtcApps.Brushes.ThemeBackground1}"
                                        KeyDown="OnFilterTextKeyDown"
                                        Text="{Binding Path=FilterText, UpdateSourceTrigger=Explicit}" />
                                    <fluent:Button
                                        Width="40"
                                        Height="40"
                                        Margin="-40,0,0,0"
                                        Command="{Binding Path=ClearFilterTextCommand}">
                                        <fluent:Button.LargeIcon>
                                            <Image
                                                Width="32"
                                                Height="32"
                                                Source="{Binding Source={x:Static fontIcons:IcoFontType.Delete}, Converter={StaticResource FontIconImageConverter}, ConverterParameter={StaticResource AtcApps.Brushes.Bootstrap.Orange500}}" />
                                        </fluent:Button.LargeIcon>
                                    </fluent:Button>
                                </StackPanel>
                                <atc:UniformSpacingPanel
                                    Width="300"
                                    Margin="10,6"
                                    Orientation="Vertical"
                                    Spacing="10">
                                    <atc:LabelDateTimePicker
                                        CustomCulture="{Binding Path=DateTimePickerUiCulture}"
                                        HideAreas="All"
                                        LabelText="From"
                                        LabelWidthNumber="50"
                                        LabelWidthSizeDefinition="Pixel"
                                        SelectedDate="{Binding Path=FilterDateTimeFrom, Mode=TwoWay}" />
                                    <atc:LabelDateTimePicker
                                        CustomCulture="{Binding Path=DateTimePickerUiCulture}"
                                        HideAreas="All"
                                        LabelText="To"
                                        LabelWidthNumber="50"
                                        LabelWidthSizeDefinition="Pixel"
                                        SelectedDate="{Binding Path=FilterDateTimeTo, Mode=TwoWay}" />
                                </atc:UniformSpacingPanel>
                                <atc:LabelComboBox
                                    HideAreas="All"
                                    Items="{Binding Path=SourceSystems}"
                                    LabelText="SourceSystem"
                                    Orientation="Vertical"
                                    SelectedKey="{Binding Path=SelectedSourceSystemKey}" />
                                <fluent:Button
                                    Command="{Binding Path=ClearFilterCommand}"
                                    Header="Clear"
                                    Style="{StaticResource ButtonStyle}">
                                    <fluent:Button.LargeIcon>
                                        <Image
                                            Width="32"
                                            Height="32"
                                            Source="{Binding Source={x:Static fontIcons:FontMaterialDesignType.FilterRemoveOutline}, Converter={StaticResource FontIconImageConverter}, ConverterParameter={StaticResource AtcApps.Brushes.Bootstrap.Orange500}}" />
                                    </fluent:Button.LargeIcon>
                                </fluent:Button>
                            </StackPanel>
                        </StackPanel>
                    </fluent:RibbonGroupBox>
                    <fluent:RibbonGroupBox Header="Focus">
                        <fluent:Button
                            Command="{Binding Path=EditHighlightsCommand}"
                            Header="Highlights"
                            Icon="{Binding Source={x:Static fontIcons:IcoFontType.Abc}, Converter={StaticResource FontIconImageConverter}, ConverterParameter={StaticResource AtcApps.Brushes.Bootstrap.Orange500}}"
                            KeyTip="H"
                            Style="{StaticResource ButtonStyle}" />
                        <Grid Width="70" Margin="2,0">
                            <StackPanel
                                Width="55"
                                Margin="0,9,0,0"
                                Orientation="Vertical">
                                <atc:ToggleSwitch
                                    Margin="5,-2,0,0"
                                    IsOn="{Binding Path=FollowTail}"
                                    OffContent=""
                                    OnContent="" />
                                <TextBlock Margin="0,2,0,0" Text="Follow Tail" />
                            </StackPanel>
                        </Grid>
                    </fluent:RibbonGroupBox>
                </fluent:RibbonTabItem>

                <fluent:RibbonTabItem Header="View" KeyTip="V">
                    <fluent:RibbonGroupBox Header="List">
                        <fluent:Button
                            Command="{Binding Path=ChangeViewModeCommand}"
                            CommandParameter="{x:Static app:ViewMode.ListView}"
                            Header="List View"
                            Icon="{Binding Source={x:Static fontIcons:IcoFontType.List}, Converter={StaticResource FontIconImageConverter}, ConverterParameter={StaticResource AtcApps.Brushes.Bootstrap.Blue500}}"
                            Style="{StaticResource ButtonStyle}" />
                    </fluent:RibbonGroupBox>
                    <fluent:RibbonGroupBox Header="Charts">
                        <fluent:Button
                            Command="{Binding Path=ChangeViewModeCommand}"
                            CommandParameter="{x:Static app:ViewMode.ChartLogLevelPie}"
                            Header="Log Level Distribution"
                            Icon="{Binding Source={x:Static fontIcons:FontAwesomeSolidType.ChartPie}, Converter={StaticResource FontIconImageConverter}, ConverterParameter={StaticResource AtcApps.Brushes.Bootstrap.Blue500}}"
                            Style="{StaticResource ButtonStyle}" />
                        <fluent:Button
                            Command="{Binding Path=ChangeViewModeCommand}"
                            CommandParameter="{x:Static app:ViewMode.ChartTimeline}"
                            Header="Timeline Distribution"
                            Icon="{Binding Source={x:Static fontIcons:FontAwesomeSolidType.ChartBar}, Converter={StaticResource FontIconImageConverter}, ConverterParameter={StaticResource AtcApps.Brushes.Bootstrap.Blue500}}"
                            Style="{StaticResource ButtonStyle}" />
                    </fluent:RibbonGroupBox>
                </fluent:RibbonTabItem>

            </fluent:Ribbon>
            <!--  ::::::::::::::::::::::::::::::::::::::::::::::  -->
            <atc:GridEx Grid.Row="1" Rows="Auto,*">
                <StackPanel
                    Grid.Row="0"
                    Background="DarkOrange"
                    Visibility="{Binding Path=NewVersionIsAvailable, Converter={StaticResource StringNullOrEmptyToVisibilityCollapsedValueConverter}}">
                    <StackPanel HorizontalAlignment="Center" Orientation="Horizontal">
                        <atc:ImageButton Command="{Binding Path=OpenApplicationCheckForUpdatesCommand}" Content="{Binding Path=NewVersionIsAvailable, FallbackValue='New version of LogViewer is available'}">
                            <atc:ImageButton.Resources>
                                <Style TargetType="{x:Type atc:ImageButton}">
                                    <Setter Property="Margin" Value="0,5" />
                                    <Setter Property="Template">
                                        <Setter.Value>
                                            <ControlTemplate TargetType="{x:Type atc:ImageButton}">
                                                <Border x:Name="Border" Background="Transparent">
                                                    <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                                                </Border>
                                                <ControlTemplate.Triggers>
                                                    <Trigger Property="IsMouseOver" Value="True">
                                                        <Setter TargetName="Border" Property="Opacity" Value="0.5" />
                                                    </Trigger>
                                                </ControlTemplate.Triggers>
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>
                                </Style>
                            </atc:ImageButton.Resources>
                        </atc:ImageButton>
                    </StackPanel>
                </StackPanel>
                <Grid Grid.Row="1">
                    <!--  ListView  -->
                    <atc:GridEx
                        Columns="*"
                        Rows="4*,5,1*"
                        Visibility="{Binding Path=ViewMode, ConverterParameter={x:Static app:ViewMode.ListView}, Converter={StaticResource ViewModeVisibilityConverter}, FallbackValue=Collapsed}">
                        <ListView
                            Grid.Row="0"
                            AlternationCount="0"
                            ContextMenuOpening="OnContextMenuOpening"
                            FontFamily="Modern"
                            ItemsSource="{Binding LogEntries}"
                            KeyDown="OnListViewKeyDown"
                            SelectedItem="{Binding Path=SelectedLogEntry}"
                            SelectionMode="Single">
                            <b:Interaction.Behaviors>
                                <behaviors:AutoScrollListViewBehavior IsEnabled="{Binding Path=FollowTail}" ScrollDirection="Bottom" />
                            </b:Interaction.Behaviors>
                            <ListView.View>
                                <GridView>
                                    <GridViewColumn
                                        Width="Auto"
                                        DisplayMemberBinding="{Binding Path=TimeStamp, StringFormat='yyyy-MM-dd HH:mm:ss.fff'}"
                                        Header="Date/Time" />
                                    <GridViewColumn Width="Auto">
                                        <GridViewColumn.CellTemplate>
                                            <DataTemplate DataType="{x:Type models:AtcLogEntryEx}">
                                                <Ellipse
                                                    Width="16"
                                                    Height="16"
                                                    VerticalAlignment="Center"
                                                    Fill="{Binding Path=LogLevel, Converter={StaticResource LogLevelToBrushConverter}}" />
                                            </DataTemplate>
                                        </GridViewColumn.CellTemplate>
                                    </GridViewColumn>
                                    <GridViewColumn Width="1000" Header="Message">
                                        <GridViewColumn.CellTemplate>
                                            <DataTemplate DataType="{x:Type models:AtcLogEntryEx}">
                                                <TextBlock
                                                    Background="{Binding Path=HighlightBackground}"
                                                    Foreground="{Binding Path=HighlightForeground}"
                                                    Text="{Binding Path=MessageShort}"
                                                    TextWrapping="Wrap" />
                                            </DataTemplate>
                                        </GridViewColumn.CellTemplate>
                                    </GridViewColumn>
                                    <GridViewColumn
                                        Width="280"
                                        DisplayMemberBinding="{Binding Path=SourceIdentifier}"
                                        Header="Source Identifier" />
                                </GridView>
                            </ListView.View>
                        </ListView>
                        <GridSplitter Grid.Row="1" HorizontalAlignment="Stretch" />
                        <atc:UniformSpacingPanel
                            Grid.Row="2"
                            Margin="10"
                            Orientation="Vertical"
                            Spacing="10">
                            <atc:UniformSpacingPanel Orientation="Horizontal" Spacing="10">
                                <TextBlock FontFamily="Modern" Text="LineNumber:" />
                                <TextBlock FontFamily="Modern" Text="{Binding Path=SelectedLogEntry.LineNumber, FallbackValue=''}" />
                            </atc:UniformSpacingPanel>
                            <TextBlock
                                FontFamily="Modern"
                                Text="{Binding Path=SelectedLogEntry.MessageFull, FallbackValue=''}"
                                TextWrapping="Wrap"
                                Visibility="{Binding Path=SelectedLogEntry.MessageFull, Converter={StaticResource JsonFormatVisibilityConverter}, ConverterParameter=False, FallbackValue=Collapsed}" />
                            <atc:JsonViewer
                                BorderBrush="Transparent"
                                Data="{Binding Path=SelectedLogEntry.MessageFull, FallbackValue=''}"
                                ShowActionAndInformationBar="False"
                                SuppressErrorMessages="True"
                                Visibility="{Binding Path=SelectedLogEntry.MessageFull, Converter={StaticResource JsonFormatVisibilityConverter}, ConverterParameter=True, FallbackValue=Collapsed}" />
                        </atc:UniformSpacingPanel>
                    </atc:GridEx>
                    <!--  ChartLogLevelPie  -->
                    <atc:GridEx
                        Columns="*"
                        Rows="*"
                        Visibility="{Binding Path=ViewMode, ConverterParameter={x:Static app:ViewMode.ChartLogLevelPie}, Converter={StaticResource ViewModeVisibilityConverter}, FallbackValue=Visible}">
                        <atc:GridEx Columns="*,10,*" Rows="*">
                            <wpf:PieChart
                                Title="{Binding Path=ChartLogLevelPieViewModel.FilteredTitle}"
                                Grid.Column="0"
                                Series="{Binding ChartLogLevelPieViewModel.FilteredSeries}" />
                            <wpf:PieChart
                                Title="{Binding Path=ChartLogLevelPieViewModel.TotalTitle}"
                                Grid.Column="2"
                                Series="{Binding ChartLogLevelPieViewModel.TotalSeries}" />
                        </atc:GridEx>
                    </atc:GridEx>
                    <!--  ChartTimeline  -->
                    <atc:GridEx
                        Columns="*"
                        Rows="*"
                        Visibility="{Binding Path=ViewMode, ConverterParameter={x:Static app:ViewMode.ChartTimeline}, Converter={StaticResource ViewModeVisibilityConverter}, FallbackValue=Visible}">
                        <atc:GridEx Columns="*,220" Rows="*">
                            <wpf:CartesianChart
                                Title="{Binding Path=ChartTimelineViewModel.Title}"
                                Grid.Column="0"
                                Series="{Binding ChartTimelineViewModel.Series}"
                                XAxes="{Binding ChartTimelineViewModel.XAxis}"
                                YAxes="{Binding ChartTimelineViewModel.YAxis}" />
                            <atc:UniformSpacingPanel
                                Grid.Column="2"
                                Margin="10"
                                Orientation="Vertical"
                                Spacing="10">
                                <atc:LabelComboBox
                                    HideAreas="AsteriskAndInformation"
                                    Items="{Binding Path=ChartTimelineViewModel.Intervals}"
                                    LabelText="Intervals"
                                    Orientation="Vertical"
                                    SelectedKey="{Binding Path=ChartTimelineViewModel.SelectedInterval}" />
                                <atc:GridEx Columns="*, Auto">
                                    <Button
                                        Grid.Column="1"
                                        HorizontalAlignment="Center"
                                        Command="{Binding Path=ChartTimelineViewModel.RefreshCommand}">
                                        <Image
                                            Width="32"
                                            Height="32"
                                            Source="{Binding Source={x:Static fontIcons:IcoFontType.Refresh}, Converter={StaticResource FontIconImageConverter}, ConverterParameter={StaticResource AtcApps.Brushes.Bootstrap.Blue500}}" />
                                    </Button>
                                </atc:GridEx>
                            </atc:UniformSpacingPanel>
                        </atc:GridEx>
                    </atc:GridEx>
                </Grid>
            </atc:GridEx>
            <!--  ::::::::::::::::::::::::::::::::::::::::::::::  -->
            <userControls:StatusBarView Grid.Row="2" DataContext="{Binding Path=StatusBarViewModel}" />
            <!--  ::::::::::::::::::::::::::::::::::::::::::::::  -->
        </atc:GridEx>
    </atc:BusyOverlay>

</atc:NiceWindow>