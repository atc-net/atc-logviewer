<atc:NiceWindow
    x:Class="Atc.LogViewer.Wpf.App.MainWindow"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:app="clr-namespace:Atc.LogViewer.Wpf.App"
    xmlns:atc="https://github.com/atc-net/atc-wpf/tree/main/schemas"
    xmlns:atcValueConverters="https://github.com/atc-net/atc-wpf/tree/main/schemas/value-converters"
    xmlns:b="http://schemas.microsoft.com/xaml/behaviors"
    xmlns:behaviors="clr-namespace:Atc.Wpf.Controls.Behaviors;assembly=Atc.Wpf.Controls"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:fluent="urn:fluent-ribbon"
    xmlns:fontIcons="clr-namespace:Atc.Wpf.FontIcons;assembly=Atc.Wpf.FontIcons"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:models="clr-namespace:Atc.LogViewer.Wpf.App.Models"
    xmlns:userControls="clr-namespace:Atc.LogViewer.Wpf.App.UserControls"
    xmlns:valueConverters="clr-namespace:Atc.LogViewer.Wpf.App.ValueConverters"
    Title="..:: ATC Log.Viewer ::.."
    Width="1500"
    Height="1000"
    MinWidth="700"
    MinHeight="400"
    d:DataContext="{d:DesignInstance Type=app:MainWindowViewModel}"
    WindowState="{Binding Path=WindowState}"
    mc:Ignorable="d">

    <atc:NiceWindow.Resources>
        <ResourceDictionary>
            <atcValueConverters:FontIconImageSourceValueConverter x:Key="FontIconImageConverter" />
            <atcValueConverters:LogLevelToBrushValueConverter x:Key="LogLevelToBrushConverter" />
            <valueConverters:JsonFormatVisibilityVisibleValueConverter x:Key="JsonFormatVisibilityConverter" />

            <Style
                x:Key="{x:Type fluent:BackstageTabControl}"
                BasedOn="{StaticResource {x:Type fluent:BackstageTabControl}}"
                TargetType="{x:Type fluent:BackstageTabControl}">
                <Setter Property="SelectedContentMargin" Value="0" />
            </Style>

            <Style x:Key="ButtonStyle" TargetType="{x:Type fluent:Button}">
                <Setter Property="Margin" Value="2,0" />
                <Setter Property="MinWidth" Value="70" />
            </Style>

            <Style x:Key="ToggleButtonStyle" TargetType="{x:Type fluent:ToggleButton}">
                <Setter Property="Margin" Value="2,0" />
                <Setter Property="MinWidth" Value="70" />
            </Style>
        </ResourceDictionary>
    </atc:NiceWindow.Resources>

    <atc:BusyOverlay IsBusy="{Binding Path=IsBusy}">
        <atc:GridEx Rows="Auto,*,Auto">
            <!--  ::::::::::::::::::::::::::::::::::::::::::::::  -->
            <fluent:Ribbon
                Grid.Row="0"
                AutomaticStateManagement="True"
                CanCustomizeQuickAccessToolBar="False"
                IsQuickAccessToolBarMenuDropDownVisible="False"
                IsQuickAccessToolBarVisible="False">

                <!--  Backstage  -->
                <fluent:Ribbon.Menu>
                    <fluent:Backstage Header="Application" KeyTip="A">
                        <fluent:BackstageTabControl>
                            <fluent:Button
                                Command="{Binding Path=NewProfileCommand}"
                                Header="New profile"
                                Icon="{Binding Source={x:Static fontIcons:IcoFontType.ContactAdd}, Converter={StaticResource FontIconImageConverter}, ConverterParameter={StaticResource AtcApps.Brushes.ThemeForeground}}"
                                KeyTip="N" />
                            <fluent:Button
                                Command="{Binding Path=OpenProfileCommand}"
                                Header="Open profile"
                                Icon="{Binding Source={x:Static fontIcons:IcoFontType.EnvelopeOpen}, Converter={StaticResource FontIconImageConverter}, ConverterParameter={StaticResource AtcApps.Brushes.ThemeForeground}}"
                                KeyTip="P" />
                            <fluent:Button
                                Command="{Binding Path=OpenLastUsedProfileCommand}"
                                Header="Open last used profile"
                                Icon="{Binding Source={x:Static fontIcons:IcoFontType.EnvelopeOpen}, Converter={StaticResource FontIconImageConverter}, ConverterParameter={StaticResource AtcApps.Brushes.ThemeForeground}}"
                                KeyTip="R" />
                            <fluent:Button
                                Command="{Binding Path=OpenLogFolderCommand}"
                                Header="Open log folder"
                                Icon="{Binding Source={x:Static fontIcons:FontAwesomeRegularType.FolderOpen}, Converter={StaticResource FontIconImageConverter}, ConverterParameter={StaticResource AtcApps.Brushes.ThemeForeground}}"
                                KeyTip="O" />
                            <Separator />
                            <fluent:Button
                                Command="{Binding Path=ApplicationExitCommand}"
                                Header="Exit"
                                Icon="{Binding Source={x:Static fontIcons:FontAwesomeRegularType.TimesCircle}, Converter={StaticResource FontIconImageConverter}, ConverterParameter={StaticResource AtcApps.Brushes.ThemeForeground}}"
                                KeyTip="X" />
                        </fluent:BackstageTabControl>
                    </fluent:Backstage>
                </fluent:Ribbon.Menu>

                <!--  Tabs  -->
                <fluent:RibbonTabItem Header="Home" KeyTip="H">
                    <fluent:RibbonGroupBox Header="Filter">
                        <StackPanel Orientation="Horizontal">
                            <fluent:ToggleButton
                                Header="Trace"
                                IsChecked="{Binding Path=IsTraceEnabled}"
                                LargeIcon="{Binding Source={x:Static fontIcons:IcoFontType.BearTracks}, Converter={StaticResource FontIconImageConverter}, ConverterParameter={StaticResource TraceBrush}}"
                                Style="{StaticResource ToggleButtonStyle}" />
                            <fluent:ToggleButton
                                Header="Debug"
                                IsChecked="{Binding Path=IsDebugEnabled}"
                                LargeIcon="{Binding Source={x:Static fontIcons:IcoFontType.FrogTracks}, Converter={StaticResource FontIconImageConverter}, ConverterParameter={StaticResource DebugBrush}}"
                                Style="{StaticResource ToggleButtonStyle}" />
                            <fluent:ToggleButton
                                Header="Information"
                                IsChecked="{Binding Path=IsInfoEnabled}"
                                LargeIcon="{Binding Source={x:Static fontIcons:IcoFontType.InfoCircle}, Converter={StaticResource FontIconImageConverter}, ConverterParameter={StaticResource InformationBrush}}"
                                Style="{StaticResource ToggleButtonStyle}" />
                            <fluent:ToggleButton
                                Header="Warning"
                                IsChecked="{Binding Path=IsWarningEnabled}"
                                LargeIcon="{Binding Source={x:Static fontIcons:IcoFontType.Warning}, Converter={StaticResource FontIconImageConverter}, ConverterParameter={StaticResource WarningBrush}}"
                                Style="{StaticResource ToggleButtonStyle}" />
                            <fluent:ToggleButton
                                Header="Error"
                                IsChecked="{Binding Path=IsErrorEnabled}"
                                LargeIcon="{Binding Source={x:Static fontIcons:IcoFontType.Bug}, Converter={StaticResource FontIconImageConverter}, ConverterParameter={StaticResource ErrorBrush}}"
                                Style="{StaticResource ToggleButtonStyle}" />
                            <fluent:ToggleButton
                                Header="Critical"
                                IsChecked="{Binding Path=IsCriticalEnabled}"
                                LargeIcon="{Binding Source={x:Static fontIcons:IcoFontType.AngryMonster}, Converter={StaticResource FontIconImageConverter}, ConverterParameter={StaticResource CriticalBrush}}"
                                Style="{StaticResource ToggleButtonStyle}" />
                            <StackPanel Margin="10" Orientation="Horizontal">
                                <TextBox
                                    Width="400"
                                    Height="40"
                                    Padding="5"
                                    VerticalContentAlignment="Center"
                                    Background="{DynamicResource AtcApps.Brushes.ThemeBackground1}"
                                    KeyDown="OnFilterTextKeyDown"
                                    Text="{Binding Path=FilterText, UpdateSourceTrigger=Explicit}" />
                                <fluent:Button
                                    Width="40"
                                    Height="40"
                                    Margin="10,0,0,0"
                                    Command="{Binding Path=ClearFilterTextCommand}">
                                    <fluent:Button.LargeIcon>
                                        <Image
                                            Width="32"
                                            Height="32"
                                            Source="{Binding Source={x:Static fontIcons:IcoFontType.Delete}, Converter={StaticResource FontIconImageConverter}, ConverterParameter={StaticResource AtcApps.Brushes.Bootstrap.Orange500}}" />
                                    </fluent:Button.LargeIcon>
                                </fluent:Button>
                            </StackPanel>

                        </StackPanel>
                    </fluent:RibbonGroupBox>
                    <fluent:RibbonGroupBox Header="Focus">
                        <fluent:Button
                            Command="{Binding Path=EditHighlightsCommand}"
                            Header="Follow Tail"
                            Icon="{Binding Source={x:Static fontIcons:IcoFontType.Abc}, Converter={StaticResource FontIconImageConverter}, ConverterParameter={StaticResource AtcApps.Brushes.Bootstrap.Orange500}}"
                            KeyTip="H"
                            Style="{StaticResource ButtonStyle}" />
                        <Grid Width="70" Margin="2,0">
                            <StackPanel
                                Width="55"
                                Margin="0,9,0,0"
                                Orientation="Vertical">
                                <atc:ToggleSwitch
                                    Margin="5,-2,0,0"
                                    IsOn="{Binding Path=FollowTail}"
                                    OffContent=""
                                    OnContent="" />
                                <TextBlock Margin="0,2,0,0" Text="Follow Tail" />
                            </StackPanel>
                        </Grid>

                    </fluent:RibbonGroupBox>
                </fluent:RibbonTabItem>

            </fluent:Ribbon>
            <!--  ::::::::::::::::::::::::::::::::::::::::::::::  -->
            <atc:GridEx
                Grid.Row="1"
                Columns="*"
                Rows="4*,5,1*">
                <ListView
                    Grid.Row="0"
                    AlternationCount="0"
                    ContextMenuOpening="OnContextMenuOpening"
                    FontFamily="Modern"
                    ItemsSource="{Binding LogEntries}"
                    KeyDown="OnListViewKeyDown"
                    SelectedItem="{Binding Path=SelectedLogEntry}"
                    SelectionMode="Single">
                    <b:Interaction.Behaviors>
                        <behaviors:AutoScrollListViewBehavior IsEnabled="{Binding Path=FollowTail}" ScrollDirection="Bottom" />
                    </b:Interaction.Behaviors>
                    <ListView.View>
                        <GridView>
                            <GridViewColumn
                                Width="Auto"
                                DisplayMemberBinding="{Binding Path=DateTime, StringFormat='yyyy-MM-dd HH:mm:ss.fff'}"
                                Header="Date/Time" />
                            <GridViewColumn Width="Auto">
                                <GridViewColumn.CellTemplate>
                                    <DataTemplate DataType="{x:Type models:AtcLogEntryEx}">
                                        <Ellipse
                                            Width="16"
                                            Height="16"
                                            VerticalAlignment="Center"
                                            Fill="{Binding Path=LogLevel, Converter={StaticResource LogLevelToBrushConverter}}" />
                                    </DataTemplate>
                                </GridViewColumn.CellTemplate>
                            </GridViewColumn>
                            <GridViewColumn Width="1000" Header="Message">
                                <GridViewColumn.CellTemplate>
                                    <DataTemplate DataType="{x:Type models:AtcLogEntryEx}">
                                        <TextBlock
                                            Background="{Binding Path=HighlightBackground}"
                                            Foreground="{Binding Path=HighlightForeground}"
                                            Text="{Binding Path=MessageShort}"
                                            TextWrapping="Wrap" />
                                    </DataTemplate>
                                </GridViewColumn.CellTemplate>
                            </GridViewColumn>
                            <GridViewColumn
                                Width="280"
                                DisplayMemberBinding="{Binding Path=SourceIdentifier}"
                                Header="Source Identifier" />
                        </GridView>
                    </ListView.View>
                </ListView>
                <GridSplitter Grid.Row="1" HorizontalAlignment="Stretch" />
                <Grid Grid.Row="2" Margin="10">
                    <TextBlock
                        FontFamily="Modern"
                        Text="{Binding Path=SelectedLogEntry.MessageFull, FallbackValue=''}"
                        TextWrapping="Wrap"
                        Visibility="{Binding Path=SelectedLogEntry.MessageFull, Converter={StaticResource JsonFormatVisibilityConverter}, ConverterParameter=False, FallbackValue=''}" />
                    <atc:JsonViewer
                        BorderBrush="Transparent"
                        Data="{Binding Path=SelectedLogEntry.MessageFull, FallbackValue=''}"
                        ShowActionAndInformationBar="False"
                        SuppressErrorMessages="True"
                        Visibility="{Binding Path=SelectedLogEntry.MessageFull, Converter={StaticResource JsonFormatVisibilityConverter}, ConverterParameter=True, FallbackValue=''}" />
                </Grid>
            </atc:GridEx>
            <!--  ::::::::::::::::::::::::::::::::::::::::::::::  -->
            <userControls:StatusBarView Grid.Row="2" DataContext="{Binding Path=StatusBarViewModel}" />
            <!--  ::::::::::::::::::::::::::::::::::::::::::::::  -->
        </atc:GridEx>
    </atc:BusyOverlay>

</atc:NiceWindow>
